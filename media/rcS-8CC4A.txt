#!/bin/sh

TIM=true; # TIM=tim; # for timing

# set environment variables
. /etc/profile

# mount other file systems
mount -t tmpfs mdev /dev
/usr/bin/make_dev_nodes.sh
mount -a; $TIM done "mount -a"

if grep /dev/root.*ext4 /proc/mounts > /dev/null; then
	mount -o,remount,noatime,noauto_da_alloc,barrier=0 /
fi

. /etc/setplatform
if [ "$PLATFORM" == "MADRID" ]; then
	ln -sf ../../LF/Base/LpadAssets/Video/powerdown.wav			/var/sounds/powerdown.wav
	ln -sf ../../LF/Base/LpadAssets/Video/StartupVideo.ogg 		/var/sounds/StartupVideo.ogg
	ln -sf ../../LF/Base/LpadAssets/Video/ShutdownVideo.ogg 	/var/sounds/ShutdownVideo.ogg
	ln -sf ../../LF/Base/LpadAssets/Video/TransitionVideo.ogg 	/var/sounds/TransitionVideo.ogg
else
	ln -sf ../../LF/Base/L3B/Video/powerdown.wav /var/sounds/powerdown.wav
	ln -sf ../../LF/Base/L3B/Video/LPTx_SplashAnimation.ogg /var/sounds/StartupVideo.ogg
	ln -sf ../../LF/Base/L3B/Video/shutdown.ogg /var/sounds/ShutdownVideo.ogg
	ln -sf ../../LF/Base/L3B/Video/LoadingScreen.ogg /var/sounds/TransitionVideo.ogg
fi

# Launch VideoDaemon.  This won't actually launch a video but it will start up the service.
VideoDaemon 750 &

#Mount bulk early because it's fast on SD
#NOTE: This could be even faster if moved to fstab, but it could break ATAP
if [ `cat /sys/devices/platform/lf1000-gpio/boot_image` = "PLAY" ]; then
	$TIM begin "mounts";
	/etc/init.d/mounts start;
	$TIM done "mounts"
fi

# FIXME: Show version -- This doesn't even work!
# if grep B /sys/devices/platform/lf1000-gpio/board_id > /dev/null; then
#  	/usr/bin/drawtext-fb /dev/fb0 /var/fonts/monotext8x16.rgb "LPAD rcS `cat /etc/version`" 10 5 1
# fi

# load audio drivers
/etc/init.d/alsa start

# set host name using serial number
hostname Explorer-`mfgdata get sn`

# configure POP audio if selected
if [ -e /flags/pop ]; then
	if [ -e /sys/devices/platform/didj-asoc/force_audio ]; then
		echo 1 > /sys/devices/platform/didj-asoc/force_audio
	fi
	if [ -e /sys/devices/platform/didj-asoc/force_mixer ]; then
		echo 1 > /sys/devices/platform/didj-asoc/force_mixer
	fi
fi

# Speed NAND up
/usr/bin/faster-nand-timing

# start low-level settings daemon
/etc/init.d/lfd start

# Stop showing movie
# touch /tmp/splash

# Determine if we booted from ATAP
ATAP=0
if [ `grep lf1000-nor /proc/iomem | cut -d '-' -f 1` = "84000000" ]; then
	if [ `cat /sys/devices/platform/lf1000-gpio/board_id` != 3 ]; then
		ATAP=0 # Don't enable for now...  
	fi
fi

if [ `cat /sys/devices/platform/lf1000-gpio/boot_image` = "RECOVERY" ]; then
	# Recovery boot
	echo "Recovery Mode"
	# Launch in background; it will "poweroff" when done
	/usr/bin/recovery &
	exit 0
elif [ `cat /sys/devices/platform/lf1000-gpio/request` = "TRAPDOOR" ]; then
	# Manufacturing test mode
	echo "Manufacturing Test Trapdoor Mode"
	# Launch in background; it will "poweroff" when done
	/usr/bin/trapdoor &
	exit 0
elif [ `cat /sys/devices/platform/lf1000-gpio/request` = "SHORT" -a \
	-e /flags/developer ]; then
	# Short circuit boot
	/usr/bin/short-circuit "Short Circuit Boot" &
	exit 0
elif [ $ATAP = 1 ]; then
	# ATAP boot
	/usr/bin/short-circuit "External ATAP Boot" &
	exit 0
else
	# Normal Play boot
	ulimit -c unlimited
        echo "|/bin/sh /usr/bin/sysdump.sh /LF/Base/FR %e %p" > /proc/sys/kernel/core_pattern	

	# start logging service before everything else
	/etc/init.d/flight-recorder start

	# Log Keep-alives
	/usr/bin/show-scr | head -1 | logger -s -t "Recovery Keep-Alives" -p local4.notice

	# # 8 second delay for first boot... about 6 seconds from here
	# if [ `cat /sys/devices/platform/lf1000-gpio/power` = "COLD" ]; then
	# 	# But real developers will not want this at all!!
	# 	if [ ! -e /flags/no8sec ]; then
	# 		echo "Twiddle thumbs for 6 seconds more..."
	# 		sleep 6;
	# 	fi
	# fi

	# Sound and other misc, in background, but early
	(
		# Display screen before sound starts

		LANGUAGE=`mfgdata get locale | cut -d '-' -f1`
		SCREEN=/var/screens-$LANGUAGE/LEGAL.png
		if [ ! -r "$SCREEN" ]; then
			# If we can't find it, the default to english
			logger -s -t "Emerald Base" -p local4.notice "Locale: could not find $SCREEN, defaulting to english"
			SCREEN=/var/screens/LEGAL.png
		fi
		if grep B /sys/devices/platform/lf1000-gpio/board_id > /dev/null; then
			SCREEN=/var/screens/Madrid-Boot-logoCW.png
		fi
		logger -s -t "Emerald Base" -p local4.notice "Locale: Loading $SCREEN"
		imager-fb /dev/fb0 "$SCREEN"

		
		# Ensure that the bus clock is set up for 144MHz to give the
		# correct USB host clock rate.  Older bootstraps set the clock
		# to 147MHz so we'll change it here and hide the "flicker" in
		# updating the screen contents.                             
		echo "3,64,2" > /sys/devices/platform/lf1000-clock/pll1
		$TIM done "display legal"

		# adjust the CPU speed if requested
		if [ -e /flags/cpu_freq_in_hz ]; then
			cat /flags/cpu_freq_in_hz > /sys/devices/platform/lf1000-clock/cpu_freq_in_hz
		fi

		# restore volume setting if one exists
		if [ -e /flags/volume ]; then
			lfd-ctrl set volume `cat /flags/volume`
		else
			lfd-ctrl set volume 6
		fi

		# play sound
		( $TIM begin "sounds/startup.wav"
		  aplay /var/sounds/startup.wav; $TIM end "sounds/startup.wav"
		  tim begin "Start splash video"
		  vnotify 6	# Send a signal to VideoDaemon to play the startup video.
		  tim done "End splash video" 
		) &

		# Set Backlight low-setting.  This is the physical value to use
		# for lowest backlight brightness
		if [ -e /sys/devices/platform/lf1000-dpc/backlight_threshold ]; then
			mfgdata get bl > /sys/devices/platform/lf1000-dpc/backlight_threshold
		fi

		# if nonzero NOR values then set battery ADC slope and offset 
		if [ "`mfgdata get adc`" != "0 0" ]; then
			logger -s -t "Emerald Base" -p local4.notice "Use ADC settings from NOR `mfgdata get adc`"
			mfgdata get adc | cut -d ' ' -f 1 > /sys/devices/platform/lf1000-power/adc_constant
			mfgdata get adc | cut -d ' ' -f 2 > /sys/devices/platform/lf1000-power/adc_slope_256
		else
			logger -s -t "Emerald Base" -p local4.notice "Use default ADC settings (NOR invalid)"
		fi

		# USB gadget driver needs to start early to respond to existing connections
		if [ -e /flags/dftp1 -o -e /flags/developer ]; then
			/etc/init.d/usbether start; # $TIM done "usbether"
		else
			/etc/init.d/dftp2 start;
		fi

		# TTpro 978 Restore time from file system if cold booting, and flush to RTC
		# TTpro 1297, test for /flags/lasttime be present too
		if [ `cat /sys/devices/platform/lf1000-gpio/power` = "COLD" -a -e /flags/lasttime ]; then
			logger -s -t "Emerald Base" -p local4.notice "Cold Boot; Setting clock to /flags/lasttime=$(cat /flags/lasttime)"
			date -s "$(date +'%Y%m%d%H%M.%S' -d @$(cat /flags/lasttime))"
			hwclock --systohc
		fi

		# set date to avoid errors in mq_timesend() and mq_timereceive() POSIX funcs
		if [[ `date +%Y` -lt "2008" -o "2030" -lt `date +%Y` ]]
		then
			date -s "200801010101"
			hwclock --systohc
		fi

	) &

	# This is a calculated race with AppManager, who needs this
	# working within a couple seconds of his starting up.
	# ( sleep 2; 
	#	$TIM begin "mounts at 2s";
	#	/etc/init.d/mounts start;
	#	$TIM done "mounts"
	# ) &

	#Start sync demon
	nice -10 /usr/bin/syncd &

	# Late start these guys in background
	if [ -e /flags/dftp1 -o -e /flags/developer ]; then
		( sleep 10; $TIM begin "Rest of networking at 10s";
			nice -10 /etc/init.d/dbus-1 start; # $TIM done "dbus-1"
			nice -10 /etc/init.d/networking start; # $TIM done "networking"
			nice -10 /etc/init.d/avahi-daemon start; # $TIM done "avahi-daemon"
			/etc/init.d/vbus start; # $TIM done "vbus start"
			# start telnet and ftp only for developers
			if [ -e /flags/developer ]; then
				/etc/init.d/telnetd start; # $TIM done "telnetd"
				/etc/init.d/vsftpd start; # $TIM done "vsftpd"
				logger -s -t "Emerald Base" -p local4.notice "starting telnetd and vsftpd"
			fi
			$TIM done "Rest of networking"
		) &
	else
		( sleep 10; $TIM begin "Start local networking at 10s";
			nice -10 /etc/init.d/networking start;
			$TIM done "Local networking"
		) &
	fi

	( sleep 15; $TIM begin "Version Logging at 15s"
		BOOT_DEV=/dev/`grep NOR_Boot /proc/mtd | cut -d : -f 1`
		nice -10 get-bootstrap-version < $BOOT_DEV > /tmp/eb
		logger -s -t "Emerald Base" -p local4.notice "hostname:         '`hostname`'"
		logger -s -t "Emerald Base" -p local4.notice "Board ID:         '`cat /sys/devices/platform/lf1000-gpio/board_id`'"
		logger -s -t "Emerald Base" -p local4.notice "NOR BootVersion:  '`cat /tmp/eb`'"  # 0.3s
		logger -s -t "Emerald Base" -p local4.notice "NOR SerialNumber: '`mfgdata get sn`'"
		if ! grep B /sys/devices/platform/lf1000-gpio/board_id > /dev/null; then
			logger -s -t "Emerald Base" -p local4.notice "NAND BootVersion: '`nice -10 get-bootstrap-version < /dev/mtd0`'" # 0.6s
		fi
		/etc/init.d/logversion;
		$TIM end "Version Logging"
	) &
	
	# Get touchscreen driver loaded before app
	/etc/init.d/touchscreen start; # $TIM done "touchscreen" 
	/usr/bin/setcal; # $TIM done "setcal"

	# Cosmic spaghetti surrounds AppManager launch
	if [ -e /flags/main_app ] ; then 
	   	APP="`cat /flags/main_app`"
		if [ "X$APP" != "X" ] ; then 
			logger -s -t "Emerald Base" -p local4.notice "/flags/main_app exists. Contains '$APP'"
			if [ -x "$APP" ] ; then
				$APP & 
			else
				rm /flags/main_app		
				logger -s -t "Emerald Base" -p local4.notice "$APP does not exist or is not executable.  Removing flags/main_app and starting normally!"
			fi
		else 
			logger -s -t "Emerald Base" -p local4.notice "Started in Console Only mode due to empty flags/main_app present."
		fi
	fi

	if [ ! -e /flags/main_app ]; then
		$TIM begin "app"
		echo "Launching AppManager normally"
		/usr/bin/app &	
	fi
fi

#-------------------------------------------------------------------------------
# Cart mounting
# Load the lfcart module, which detects changes in the state of the "Cartridge
# Inserted" gpio line and calls device_add() or or device_del() accordingly.
# That action causes mdev to act.  It run the /etc/mdev/cartridge.sh
# script.  That script tells the NAND driver to look for a NAND on the
# cartridge.  It tries to mount the cartridge's file system.  It runs
# cnotify to notify the UI that a cartridge has been inserted and mounted.
#-------------------------------------------------------------------------------
modprobe lfcart

# Re-scan mdev devices for late-loading drivers like LEX Camera Accessory
mdev -s