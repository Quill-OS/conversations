Hello,
I don't know if I am writing to the appropriate e-mail address or if I should have sent this to someone else, so feel free to forward it to anyone you think would be the best person to answer this message.

My name is Nicolas Mailloux, and I am usually known in the dev community as tux-linux. For more than two years now, I have been building a custom open-source OS for Kobo and Kindle devices called InkBox OS. We now officially support 8 devices with others in the process of being ported or with basic CLI working (EPDs are a lot of trouble when you don't have the drivers for them). I have heard about the PIneNote development team seeking an OS for their device, and would like to submit my OS for this purpose.

We just recently released version 2.0, which took more than a year to complete. You can check out how it looks here: https://youtu.be/cyWu_pHwqNgWebsite: https://inkbox.ddns.net
As for the source code itself, we have an organization on GitHub at https://github.com/Kobo-InkBox
I will try to be brief and describe the fundamentals on which InkBox OS has been conceived, but as you can see, my e-mail is getting pretty long...
If it had to, I think the main goal of the OS could be named with one word: security.Throughout this summary, I will add timestamps referring to the video if you want to follow my explanations better.
We are using an Alpine Linux base system (rootfs), which has to date a little bit (2019) because of the vendor kernel versions some of the older devices we support have (such as the Kobo Mini (2.6.35.3)); newer versions of musl or glibc don't seem to like it. We have patched some kernels to adapt them to the OS, depending on the device (kernel). Of course, if this was built for the PineNote, we could certainly manage some updating.
When I said 'base system' though, it might not have been that much true ; the structure of the OS is as follows: the kernel boots, it loads an init ramdisk embedded in its image and starts it. This initrd then runs an init program which was written from scratch in C (inkbox-os-init) and that does most of the basic system initialization.
This initrd then chroots into the 'base' system, which is Alpine Linux, and runs openrc to complete the remainder of the startup tasks. Our GUI is written in C++ and uses Qt 5.15.2 with custom platform plugins to interact with the various EPDs of the devices we support. An important thing to note is that it also runs in a chroot for further environment isolation. So at this point, we are at the second level of chrooting.
Our Reader app, which probably needs a massive rewrite but works for now, can display ePUBs, PDFs, pictures and text files (1:39) We also have a 'local library' display widget that uses JSON databases to organize its content (7:10), as well as an home page which uses a similar system to display recent books. There is also an 'online library' feature which can fetch books from Gutenberg (9:30).
Complementary to the basic reading functions we offer, there are also a lot of built-in apps (16:47) as well as a complete and usable X11 framework which is named KoBox (27:08). We also support user apps (19:56), which are self-contained and isolated applications running in an unprivileged chroot environment with a separate PID namespace. Those applications can be installed by the users themselves.
Consider the main goal I was talking about earlier: every software package in InkBox OS, once the kernel has booted, has to be digitally signed by us, the main developers of the project, before the device can run it. Updates, rootfs, GUI package, everything. Also note that our rootfs is actually a compressed SquashFS file mounted by the initrd at boot and that it is read-only, albeit with the possibility of making it read-write with the help of UnionFS and copy-on-write. This makes updating much simpler and minimizes MMC wear and the size it takes on the card. It also makes factory reset much more straightforward, as, provided we are talking about the rootfs, we just have to delete a "write" folder outside of the mounted volume. Other software packages work in a similar way.
I am sharing this with you today, even if I don't know who I am talking to, because we would benefit from some help for continuing the development of the project.Currently, we are only two people actively working on it and are both students (I am 17 and the other, which has been contributing for more than a year now, is almost 19), which sometimes makes developing hard, provided that we don't really have any university background for the moment (and it also means we sometimes write bad code without even knowing it!) and work with a huge program which regularly needs bug fixes, and so we were thinking of partnering with Pine64 to help port it to the PineNote, and while we would offer free help for the team to actually understand how the internals of the OS works, we could also expect some help in rewriting some parts of it by the members of the team.I do not know if this project passes quality standards for your company, but we figured out it was worth a try to share it with you.
I wish you the best,Nicolas Mailloux (tux-linux)
